type Token @entity {
  "Token address"
  id: ID!
  "Number of decimals for this Token"
  decimals: Int!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
}

type Vault @entity {
  "Vault address"
  id: ID!
  "Token this Vault will accrue"
  token: Token!
  "Token representing Shares in the Vault"
  shareToken: Token!
  "Latest Vault Update"
  latestUpdate: VaultUpdate!
  "All Vault Updates"
  historicalUpdates: [VaultUpdate!]! @derivedFrom(field: "vault")

  # emergency shutdown?
  # withdrawal queue

  "Creation timestamp"
  creationTimestamp: BigInt!
  "Creation block number"
  creationBlockNumber: BigInt!

  "Strategies for this Vault"
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  "Token deposits into the Vault"
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  "Token withdrawals from the Vault"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  "Transfers of Vault Shares"
  shareTransfers: [Transfer!]! @derivedFrom(field: "vault")
}

type VaultUpdate @entity {
  "Vault-Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Vault this update is for"
  vault: Vault!

  "Balance of Tokens in the Vault and its Strategies"
  tokensBalance: BigInt!
  "Current idle Token balance"
  tokensIdleBalance: BigInt! # Tokens in the Vault contract
  "Balance of Tokens invested into Strategies"
  tokensStrategyDebtTotal: BigInt!
  "Sum of all Deposits over time"
  tokensDeposited: BigInt!
  "Sum of all Withdrawals over time"
  tokensWithdrawn: BigInt!
  "Deposit limit for Tokens in the Vault"
  tokensDepositLimit: BigInt!
  "Current supply of Shares"
  sharesSupply: BigInt!
  "Sum of Shares minted over all time"
  sharesMinted: BigInt!
  "Sum of Shares burnt over all time"
  sharesBurnt: BigInt!
  "Current price per full share"
  pricePerShare: BigInt!
  ####Â Awaiting updated Vault Yield-Oracles
  # "12-day EMA of Vault APY"
  # apy12dEMA: Int!
  # "50-day EMA of Vault APY"
  # apy50dEMA: Int!
  "Total earnings generated in Tokens"
  earningsTotal: BigInt!
  "Total management fee revenue in Tokens"
  feesManagementTotal: BigInt!
  "Total performance fee revenue in Tokens"
  feesPerformanceTotal: BigInt!
  "Management fee in basis points"
  feeManagementBps: Int!
  "Performance fee in basis points"
  feePerformanceBps: Int!
}

type Account @entity {
  "Account address"
  id: ID!
  "Vault deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Vault withdrawals"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  "Vault balances"
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")

  "Incoming share transfers"
  sharesReceived: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing share transfers"
  sharesSent: [Transfer!]! @derivedFrom(field: "from")
}

type Deposit @entity {
  "Transaction-Log"
  id: ID!
  "Account making Deposit"
  account: Bytes!
  "Vault deposited into"
  vault: Vault!
  "Number of Tokens deposited into Vault"
  tokenAmount: BigInt!
  "Number of new Vault Shares minted"
  sharesMinted: BigInt!
}

type Withdrawal @entity {
  "Transaction-Log"
  id: ID!
  "Account making Deposit"
  account: Bytes!
  "Vault withdrawn from"
  vault: Vault!
  "Number of Tokens withdrawn from Vault"
  tokenAmount: BigInt!
  "Number of Vault Shares burnt"
  sharesBurnt: BigInt!
}

type Transfer @entity {
  "Transaction-Log"
  id: ID!
  "Vault"
  vault: Vault!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  "Vault Share Token"
  shareToken: Token!
  "Number of Vault Shares transferred"
  amount: BigInt!
  "Vault Token"
  token: Token!
  "Number of Tokens redeemable for shares transferred"
  tokenAmount: BigInt!
  "Timestamp of Transfer"
  timestamp: BigInt!
  "Block number of Transfer"
  blockNumber: BigInt!
}

type AccountVaultBalance @entity {
  "Account-Vault"
  id: ID!
  "Vault"
  vault: Vault!
  "Account"
  account: Account!
  "Vault token"
  token: Token!
  "Vault share token"
  shareToken: Token!
  "Current balance of Tokens redeemable from Vault"
  tokenBalance: BigInt!
  "Current balance of Vault shares"
  shareBalance: BigInt!
  "Account updates over time"
  historicalUpdates: [AccountUpdate!]!
}

# type AccountUpdate @entity {
#   "Account-Transaction-Log"
#   id: ID!
#   timestamp: BigInt!
#   blockNumber: BigInt!

#   "Deposit (want) token balance"
#   balance: BigInt!
#   "Total (want) token deposits"
#   deposits: BigInt!
#   "Total (want) token withdrawals"
#   withdrawals: BigInt!

#   "Share token (ytoken) balance"
#   shareBalance: BigInt!
#   "Total share tokens (ytoken) minted"
#   sharesMinted: BigInt!
#   "Total share tokens (ytoken) burnt"
#   sharesBurnt: BigInt!

#   account: Account!

#   "Total (want) tokens sent"
#   sent: BigInt!
#   "Total (want) tokens received"
#   received: BigInt!

#   "Total share tokens (ytoken) sent"
#   sharesSent: BigInt!
#   "Total share tokens (ytoken) received"
#   sharesReceived: BigInt!
# }

# type StrategyUpdate @entity {
#   "Strategy-Transaction-Log"
#   id: ID!
#   timestamp: BigInt!
#   blockNumber: BigInt!

#   strategy: Strategy!
#   "Deposit (want) token balance"
#   balance: BigInt!
#   # TODO: (?) denominated to
#   "Total performance fees"
#   earnings: BigInt!
# }

# type Harvest @entity {
#   "Strategy-Transaction-Log"
#   id: ID!
#   vault: Vault!
#   strategy: Strategy!
#   "Function caller"
#   harvester: Bytes!

#   "Vault stats"
#   vaultUpdate: VaultUpdate!
#   "Strategy stats"
#   strategyUpdate: StrategyUpdate!

#   timestamp: BigInt!
#   blockNumber: BigInt!
# }

# enum StrategyStatus {
#   Active
#   Retired
# }

# type Strategy @entity {
#   "Strategy address"
#   id: ID!
#   vault: Vault!
#   # TODO: (?) add hardcode overwrite for names that are missing
#   name: String!
#   "Current controller"
#   controller: Controller!

#   "Strategy stats"
#   strategyUpdates: [StrategyUpdate!]! @derivedFrom(field: "strategy")
#   "Active or retired"
#   strategyStatus: StrategyStatus

#   "harvest() calls"
#   harvests: [Harvest!]! @derivedFrom(field: "strategy")
# }
